# Using Randomized variant

# Python implementation QuickSort using 
# Lomuto's partition Scheme.
import random
  
'''
The function which implements QuickSort.
arr :- array to be sorted.
start :- starting index of the array.
stop :- ending index of the array.
'''
def quicksort(arr, start , stop):
    if(start < stop):
          
        # pivotindex is the index where 
        # the pivot lies in the array
        pivotindex = partitionrand(arr,start, stop)
          
        # At this stage the array is 
        # partially sorted around the pivot. 
        # Separately sorting the 
        # left half of the array and the
        # right half of the array.
        quicksort(arr , start , pivotindex-1)
        quicksort(arr, pivotindex + 1, stop)
  
# This function generates random pivot,
# swaps the first element with the pivot 
# and calls the partition function.
def partitionrand(arr , start, stop):
  
    # Generating a random number between the 
     # starting index of the array and the
    # ending index of the array.
    randpivot = random.randrange(start, stop)
  
    # Swapping the starting element of
    # the array and the pivot
    arr[start], arr[randpivot] = \
        arr[randpivot], arr[start]
    return partition(arr, start, stop)
  
'''
This function takes the first element as pivot, 
places the pivot element at the correct position 
in the sorted array. All the elements are re-arranged 
according to the pivot, the elements smaller than the
pivot is places on the left and the elements
greater than the pivot is placed to the right of pivot.
'''
def partition(arr,start,stop):
    pivot = start # pivot
      
    # a variable to memorize where the 
    i = start + 1 
      
    # partition in the array 
    for j in range(start + 1, stop + 1):
          
        # if the current element is smaller
        # or equal to pivot, shift it to the
        # left side of the partition.
        if arr[j] <= arr[pivot]:
            arr[i] , arr[j] = arr[j] , arr[i]
            i = i + 1
    arr[pivot] , arr[i - 1] =\
            arr[i - 1] , arr[pivot]
    pivot = i - 1
    return (pivot)
  
# Driver Code
if __name__ == "__main__":
    array = [10, 7, 8, 9, 1, 5]
    quicksort(array, 0, len(array) - 1)
    print(array)

********************************************************************************************************************
#Using Deterministic 

# Quick sort in Python

# function to find the partition position
def partition(array, low, high):

  # choose the rightmost element as pivot
  pivot = array[high]

  # pointer for greater element
  i = low - 1

  # traverse through all elements
  # compare each element with pivot
  for j in range(low, high):
    if array[j] <= pivot:
      # if element smaller than pivot is found
      # swap it with the greater element pointed by i
      i = i + 1

      # swapping element at i with element at j
      (array[i], array[j]) = (array[j], array[i])

  # swap the pivot element with the greater element specified by i
  (array[i + 1], array[high]) = (array[high], array[i + 1])

  # return the position from where partition is done
  return i + 1

# function to perform quicksort
def quickSort(array, low, high):
  if low < high:

    # find pivot element such that
    # element smaller than pivot are on the left
    # element greater than pivot are on the right
    pi = partition(array, low, high)

     # recursive call on the left of pivot
    quickSort(array, low, pi - 1)

    # recursive call on the right of pivot
    quickSort(array, pi + 1, high)


data = [8, 7, 2, 1, 0, 9, 6]
print("Unsorted Array")
print(data)

size = len(data)

quickSort(data, 0, size - 1)

print('Sorted Array in Ascending Order:')
print(data)
*************************************************************************************************************************
Quick sort is a widely used sorting algorithm known for its efficiency and simplicity. It can be analyzed using both deterministic and randomized variants.

Deterministic Quick Sort Analysis:
Deterministic quick sort refers to the analysis of quick sort when it is not making random choices during the pivot selection. Instead, a deterministic method is used to select the pivot element. The most common deterministic pivot selection methods are:

a. First Element: Choosing the first element as the pivot.
b. Last Element: Choosing the last element as the pivot.
c. Median of Three: Selecting the median of the first, middle, and last elements as the pivot.

The analysis of deterministic quick sort depends on the choice of the pivot element:

Best-case Time Complexity: The best-case time complexity occurs when the pivot always divides the array into two nearly equal halves. In this case, the time complexity is O(n log n), where n is the number of elements in the array.

Worst-case Time Complexity: The worst-case time complexity occurs when the pivot selection consistently results in unbalanced partitions. For example, selecting the smallest or largest element as the pivot in a sorted or reverse-sorted array. The worst-case time complexity is O(n^2), which is highly inefficient.

Average-case Time Complexity: On average, quick sort exhibits a time complexity of O(n log n) when using good pivot selection strategies like the "median of three."

Randomized Quick Sort Analysis:
Randomized quick sort is an improvement over deterministic quick sort by introducing randomness into the pivot selection process. By randomly selecting the pivot, we can achieve an expected average-case time complexity of O(n log n) with high probability.

In randomized quick sort:

The pivot is selected randomly from the array, which reduces the chances of consistently encountering the worst-case scenario.
The analysis of randomized quick sort involves probabilities and expected values:

Expected Average-case Time Complexity: The expected average-case time complexity of randomized quick sort is O(n log n) when the pivot is chosen uniformly at random from the array. This result is achieved through probabilistic analysis.
The advantage of randomized quick sort is that it mitigates the risk of encountering the worst-case time complexity observed in deterministic quick sort.
